#include "points_and_weights.h"
#include "error.h"


/*
 * Fill an array with points equally spaced between end points (inclusive)
 *
 * Parameters
 * ----------
 * N  : number of points
 * Zl : left end point 
 * Zr : right end point 
 *
 * Returns
 * -------
 * Z : array of equispaced points
 */
template <typename NumType>
void equispaced_points(SizeType N, NumType &Zl, NumType &Zr, NumType *Z) {
  for (SizeType i = 0; i < N; i++)
    Z[i] = Zl + double(i)/double(N - 1)*(Zr - Zl);
}


/*
 * Fill an array with Chebyshev points of the second kind in the interval
 * defined by the specified end points. The symmetry-preserving technique from
 * Chebfun (chebtech1/chebpts.m) is used.
 *
 * Parameters
 * ----------
 * N  : number of points
 * Zl : left end point 
 * Zr : right end point 
 *
 * Returns
 * -------
 * Z : array of Chebyshev points
 */
template <typename NumType>
void chebyshev_points(SizeType N, NumType &Zl, NumType &Zr, NumType *Z) {
  // Evaluate the points using sine function to preserve symmetry
  NumType f = 0.5*M_PI/double(N);
  for (SizeType i = 0; i < N; i++) {
    int j = (-1*int(N) + 1) + 2*int(i);
    Z[i] = sin(f*double(j));
  }

  // Scale the points to fit the domain
  for (int i = 0; i < N; i++)
    Z[i] = 0.5*(1.0 - Z[i])*Zl + 0.5*(1.0 + Z[i])*Zr;
}


// Explicit instantations of template functions
template void equispaced_points(SizeType N, Real &Zl, Real &Zr, Real *Z);
template void equispaced_points(SizeType N, Complex &Zl, Complex &Zr, Complex *Z);

template void chebyshev_points(SizeType N, Real &Zl, Real &Zr, Real *Z);
template void chebyshev_points(SizeType N, Complex &Zl, Complex &Zr, Complex *Z);


/*
 * Fill an array with Gauss-Lobatto quadrature points (endpoints are -1 and 1)
 *
 * Parameters
 * ----------
 * lob_points : MATAR CArray to fill with points
 * num        : number of points in quadrature rule
 *
 * Returns
 * -------
 * lob_points : MATAR CArray to fill with points
 */

void lobatto_points(MatarRealCArray &lob_points, const int &num) {
  switch (num) {
    case 1:
      lob_points(0) = 0.0;
      break;
    case 2:
      lob_points(0) = -1.0;
      lob_points(1) =  1.0;
      break;
    case 3:
      lob_points(0) = -1.0;
      lob_points(1) =  0.0;
      lob_points(2) =  1.0;
      break;
    case 4:
      lob_points(0) = -1.0;
      lob_points(1) = -1.0/5.0*sqrt(5.0);
      lob_points(2) =  1.0/5.0*sqrt(5.0);
      lob_points(3) =  1.0;
      break;
    case 5:
      lob_points(0) = -1.0;
      lob_points(1) = -1.0/7.0*sqrt(21.0);
      lob_points(2) =  0.0;
      lob_points(3) =  1.0/7.0*sqrt(21.0);
      lob_points(4) =  1.0;
      break;
    case 6:
      lob_points(0) = -1.0;
      lob_points(1) = -sqrt(1.0/21.0*(7.0 + 2.0*sqrt(7.0)));
      lob_points(2) = -sqrt(1.0/21.0*(7.0 - 2.0*sqrt(7.0)));
      lob_points(3) =  sqrt(1.0/21.0*(7.0 - 2.0*sqrt(7.0)));
      lob_points(4) =  sqrt(1.0/21.0*(7.0 +2.0*sqrt(7.0)));
      lob_points(5) =  1.0;
      break;
    case 7:
      lob_points(0) =  - 1.0E+00;
      lob_points(1) =  - 0.830223896278566929872032213967E+00;
      lob_points(2) =  - 0.468848793470714213803771881909E+00;
      lob_points(3) =    0.0E+00;
      lob_points(4) =    0.468848793470714213803771881909E+00;
      lob_points(5) =    0.830223896278566929872032213967E+00;
      lob_points(6) =    1.0E+00;
      break;
    case 8:
      lob_points(0) =  - 1.0E+00;
      lob_points(1) =  - 0.871740148509606615337445761221E+00;
      lob_points(2) =  - 0.591700181433142302144510731398E+00;
      lob_points(3) =  - 0.209299217902478868768657260345E+00;
      lob_points(4) =    0.209299217902478868768657260345E+00;
      lob_points(5) =    0.591700181433142302144510731398E+00;
      lob_points(6) =    0.871740148509606615337445761221E+00;
      lob_points(7) =    1.0E+00;
      break;
    case 9:
      lob_points(0) =  - 1.0E+00;
      lob_points(1) =  - 0.899757995411460157312345244418E+00;
      lob_points(2) =  - 0.677186279510737753445885427091E+00;
      lob_points(3) =  - 0.363117463826178158710752068709E+00;
      lob_points(4) =    0.0E+00;
      lob_points(5) =    0.363117463826178158710752068709E+00;
      lob_points(6) =    0.677186279510737753445885427091E+00;
      lob_points(7) =    0.899757995411460157312345244418E+00;
      lob_points(8) =    1.0E+00;
      break;
    case 10:
      lob_points(0) =  - 1.0E+00;
      lob_points(1) =  - 0.919533908166458813828932660822E+00;
      lob_points(2) =  - 0.738773865105505075003106174860E+00;
      lob_points(3) =  - 0.477924949810444495661175092731E+00;
      lob_points(4) =  - 0.165278957666387024626219765958E+00;
      lob_points(5) =    0.165278957666387024626219765958E+00;
      lob_points(6) =    0.477924949810444495661175092731E+00;
      lob_points(7) =    0.738773865105505075003106174860E+00;
      lob_points(8) =    0.919533908166458813828932660822E+00;
      lob_points(9) =   1.0E+00;
      break;
    case 11:
      lob_points(0) =  - 1.0E+00;
      lob_points(1) =  - 0.934001430408059134332274136099E+00;
      lob_points(2) =  - 0.784483473663144418622417816108E+00;
      lob_points(3) =  - 0.565235326996205006470963969478E+00;
      lob_points(4) =  - 0.295758135586939391431911515559E+00;
      lob_points(5) =    0.0E+00;
      lob_points(6) =    0.295758135586939391431911515559E+00;
      lob_points(7) =    0.565235326996205006470963969478E+00;
      lob_points(8) =    0.784483473663144418622417816108E+00;
      lob_points(9) =   0.934001430408059134332274136099E+00;
      lob_points(10) =   1.0E+00;
      break;
    case 12:
      lob_points(0) =  - 1.0E+00;
      lob_points(1) =  - 0.944899272222882223407580138303E+00;
      lob_points(2) =  - 0.819279321644006678348641581717E+00;
      lob_points(3) =  - 0.632876153031869677662404854444E+00;
      lob_points(4) =  - 0.399530940965348932264349791567E+00;
      lob_points(5) =  - 0.136552932854927554864061855740E+00;
      lob_points(6) =    0.136552932854927554864061855740E+00;
      lob_points(7) =    0.399530940965348932264349791567E+00;
      lob_points(8) =    0.632876153031869677662404854444E+00;
      lob_points(9) =   0.819279321644006678348641581717E+00;
      lob_points(10) =   0.944899272222882223407580138303E+00;
      lob_points(11) =   1.0E+00;
      break;
    case 13:
      lob_points(0) =  - 1.0E+00;
      lob_points(1) =  - 0.953309846642163911896905464755E+00;
      lob_points(2) =  - 0.846347564651872316865925607099E+00;
      lob_points(3) =  - 0.686188469081757426072759039566E+00;
      lob_points(4) =  - 0.482909821091336201746937233637E+00;
      lob_points(5) =  - 0.249286930106239992568673700374E+00;
      lob_points(6) =    0.0E+00;
      lob_points(7) =    0.249286930106239992568673700374E+00;
      lob_points(8) =    0.482909821091336201746937233637E+00;
      lob_points(9) =   0.686188469081757426072759039566E+00;
      lob_points(10) =   0.846347564651872316865925607099E+00;
      lob_points(11) =   0.953309846642163911896905464755E+00;
      lob_points(12) =   1.0E+00;
      break;
    case 14:
      lob_points(0) =  - 1.0E+00;
      lob_points(1) =  - 0.959935045267260901355100162015E+00;
      lob_points(2) =  - 0.867801053830347251000220202908E+00;
      lob_points(3) =  - 0.728868599091326140584672400521E+00;
      lob_points(4) =  - 0.550639402928647055316622705859E+00;
      lob_points(5) =  - 0.342724013342712845043903403642E+00;
      lob_points(6) =  - 0.116331868883703867658776709736E+00;
      lob_points(7) =    0.116331868883703867658776709736E+00;
      lob_points(8) =    0.342724013342712845043903403642E+00;
      lob_points(9) =   0.550639402928647055316622705859E+00;
      lob_points(10) =   0.728868599091326140584672400521E+00;
      lob_points(11) =   0.867801053830347251000220202908E+00;
      lob_points(12) =   0.959935045267260901355100162015E+00;
      lob_points(13) =   1.0E+00;
      break;
    case 15:
      lob_points(0) =  - 1.0E+00;
      lob_points(1) =  - 0.965245926503838572795851392070E+00;
      lob_points(2) =  - 0.885082044222976298825401631482E+00;
      lob_points(3) =  - 0.763519689951815200704118475976E+00;
      lob_points(4) =  - 0.606253205469845711123529938637E+00;
      lob_points(5) =  - 0.420638054713672480921896938739E+00;
      lob_points(6) =  - 0.215353955363794238225679446273E+00;
      lob_points(7) =    0.0E+00;
      lob_points(8) =    0.215353955363794238225679446273E+00;
      lob_points(9) =   0.420638054713672480921896938739E+00;
      lob_points(10) =   0.606253205469845711123529938637E+00;
      lob_points(11) =   0.763519689951815200704118475976E+00;
      lob_points(12) =   0.885082044222976298825401631482E+00;
      lob_points(13) =   0.965245926503838572795851392070E+00;
      lob_points(14) =   1.0E+00;
      break;
    case 16:
      lob_points(0) =  - 1.0E+00;
      lob_points(1) =  - 0.969568046270217932952242738367E+00;
      lob_points(2) =  - 0.899200533093472092994628261520E+00;
      lob_points(3) =  - 0.792008291861815063931088270963E+00;
      lob_points(4) =  - 0.652388702882493089467883219641E+00;
      lob_points(5) =  - 0.486059421887137611781890785847E+00;
      lob_points(6) =  - 0.299830468900763208098353454722E+00;
      lob_points(7) =  - 0.101326273521949447843033005046E+00;
      lob_points(8) =    0.101326273521949447843033005046E+00;
      lob_points(9) =   0.299830468900763208098353454722E+00;
      lob_points(10) =   0.486059421887137611781890785847E+00;
      lob_points(11) =   0.652388702882493089467883219641E+00;
      lob_points(12) =   0.792008291861815063931088270963E+00;
      lob_points(13) =   0.899200533093472092994628261520E+00;
      lob_points(14) =   0.969568046270217932952242738367E+00;
      lob_points(15) =   1.0E+00;
      break;
    case 17:
      lob_points(0) =  - 1.0E+00;
      lob_points(1) =  - 0.973132176631418314156979501874E+00;
      lob_points(2) =  - 0.910879995915573595623802506398E+00;
      lob_points(3) =  - 0.815696251221770307106750553238E+00;
      lob_points(4) =  - 0.691028980627684705394919357372E+00;
      lob_points(5) =  - 0.541385399330101539123733407504E+00;
      lob_points(6) =  - 0.372174433565477041907234680735E+00;
      lob_points(7) =  - 0.189511973518317388304263014753E+00;
      lob_points(8) =    0.0E+00;
      lob_points(9) =    0.189511973518317388304263014753E+00;
      lob_points(10) =   0.372174433565477041907234680735E+00;
      lob_points(11) =   0.541385399330101539123733407504E+00;
      lob_points(12) =   0.691028980627684705394919357372E+00;
      lob_points(13) =   0.815696251221770307106750553238E+00;
      lob_points(14) =   0.910879995915573595623802506398E+00;
      lob_points(15) =   0.973132176631418314156979501874E+00;
      lob_points(16) =   1.0E+00;
      break;
    case 18:
      lob_points(0) =  - 1.0E+00;
      lob_points(1) =  - 0.976105557412198542864518924342E+00;
      lob_points(2) =  - 0.920649185347533873837854625431E+00;
      lob_points(3) =  - 0.835593535218090213713646362328E+00;
      lob_points(4) =  - 0.723679329283242681306210365302E+00;
      lob_points(5) =  - 0.588504834318661761173535893194E+00;
      lob_points(6) =  - 0.434415036912123975342287136741E+00;
      lob_points(7) =  - 0.266362652878280984167665332026E+00;
      lob_points(8) =  - 0.897490934846521110226450100886E-01;
      lob_points(9) =    0.897490934846521110226450100886E-01;
      lob_points(10) =   0.266362652878280984167665332026E+00;
      lob_points(11) =   0.434415036912123975342287136741E+00;
      lob_points(12) =   0.588504834318661761173535893194E+00;
      lob_points(13) =   0.723679329283242681306210365302E+00;
      lob_points(14) =   0.835593535218090213713646362328E+00;
      lob_points(15) =   0.920649185347533873837854625431E+00;
      lob_points(16) =   0.976105557412198542864518924342E+00;
      lob_points(17) =   1.0E+00;
      break;
    case 19:
      lob_points(0)=   - 1.0E+00;
      lob_points(1)=   - 0.978611766222080095152634063110E+00;
      lob_points(2)=   - 0.928901528152586243717940258797E+00;
      lob_points(3)=   - 0.852460577796646093085955970041E+00;
      lob_points(4)=   - 0.751494202552613014163637489634E+00;
      lob_points(5)=   - 0.628908137265220497766832306229E+00;
      lob_points(6)=   - 0.488229285680713502777909637625E+00;
      lob_points(7)=   - 0.333504847824498610298500103845E+00;
      lob_points(8)=   - 0.169186023409281571375154153445E+00;
      lob_points(9)=     0.0E+00;
      lob_points(10) =   0.169186023409281571375154153445E+00;
      lob_points(11) =   0.333504847824498610298500103845E+00;
      lob_points(12) =   0.488229285680713502777909637625E+00;
      lob_points(13) =   0.628908137265220497766832306229E+00;
      lob_points(14) =   0.751494202552613014163637489634E+00;
      lob_points(15) =   0.852460577796646093085955970041E+00;
      lob_points(16) =   0.928901528152586243717940258797E+00;
      lob_points(17) =   0.978611766222080095152634063110E+00;
      lob_points(18) =   1.0E+00;
      break;
    case 20:
      lob_points(0) =  - 1.0E+00;
      lob_points(1) =  - 0.980743704893914171925446438584E+00;
      lob_points(2) =  - 0.935934498812665435716181584931E+00;
      lob_points(3) =  - 0.866877978089950141309847214616E+00;
      lob_points(4) =  - 0.775368260952055870414317527595E+00;
      lob_points(5) =  - 0.663776402290311289846403322971E+00;
      lob_points(6) =  - 0.534992864031886261648135961829E+00;
      lob_points(7) =  - 0.392353183713909299386474703816E+00;
      lob_points(8) =  - 0.239551705922986495182401356927E+00;
      lob_points(9) =  - 0.805459372388218379759445181596E-01;
      lob_points(10) =   0.805459372388218379759445181596E-01;
      lob_points(11) =   0.239551705922986495182401356927E+00;
      lob_points(12) =   0.392353183713909299386474703816E+00;
      lob_points(13) =   0.534992864031886261648135961829E+00;
      lob_points(14) =   0.663776402290311289846403322971E+00;
      lob_points(15) =   0.775368260952055870414317527595E+00;
      lob_points(16) =   0.866877978089950141309847214616E+00;
      lob_points(17) =   0.935934498812665435716181584931E+00;
      lob_points(18) =   0.980743704893914171925446438584E+00;
      lob_points(19) =   1.0E+00;
      break;
    default:
      std::ostringstream ss;
      ss << "Error: " << num << "-point quadrature rule not implemented.";
      throw NotImplementedError(ss.str());
  }
} 


/*
 * Fill an array with Gauss-Lobatto quadrature weights
 *
 * Parameters
 * ----------
 * lob_weights : MATAR CArray to fill with weights
 * num         : number of points in quadrature rule
 *
 * Returns
 * -------
 * lob_weights : MATAR CArray to fill with weights
 */
void lobatto_weights(MatarRealCArray &lob_weights, const int &num) {
  switch (num) {
    case 1:
      lob_weights(0) = 2.0;
      break;
    case 2:
      lob_weights(0) = 1.0;
      lob_weights(1) = 1.0;
      break;
    case 3:
      lob_weights(0) = 1.0/3.0;
      lob_weights(1) = 4.0/3.0;
      lob_weights(2) = 1.0/3.0;
      break;
    case 4:
      lob_weights(0) = 1.0/6.0;
      lob_weights(1) = 5.0/6.0;
      lob_weights(2) = 5.0/6.0;
      lob_weights(3) = 1.0/6.0;
      break;
    case 5:
      lob_weights(0) = 1.0/10.0;
      lob_weights(1) = 49.0/90.0;
      lob_weights(2) = 32.0/45.0;
      lob_weights(3) = 49.0/90.0;
      lob_weights(4) = 1.0/10.0;
      break;
    case 6:
      lob_weights(0) = 1.0/15.0;
      lob_weights(1) = 1.0/30.0*(14.0 - sqrt(7.0));
      lob_weights(2) = 1.0/30.0*(14.0 + sqrt(7.0));
      lob_weights(3) = 1.0/30.0*(14.0 + sqrt(7.0));
      lob_weights(4) = 1.0/30.0*(14.0 - sqrt(7.0));
      lob_weights(5) = 1.0/15.0;
      break;
    case 7:
      lob_weights(0) =  0.476190476190476190476190476190E-01;
      lob_weights(1) =  0.276826047361565948010700406290E+00;
      lob_weights(2) =  0.431745381209862623417871022281E+00;
      lob_weights(3) =  0.487619047619047619047619047619E+00;
      lob_weights(4) =  0.431745381209862623417871022281E+00;
      lob_weights(5) =  0.276826047361565948010700406290E+00;
      lob_weights(6) =  0.476190476190476190476190476190E-01;
      break;
    case 8:
      lob_weights(0) =  0.357142857142857142857142857143E-01;
      lob_weights(1) =  0.210704227143506039382991065776E+00;
      lob_weights(2) =  0.341122692483504364764240677108E+00;
      lob_weights(3) =  0.412458794658703881567052971402E+00;
      lob_weights(4) =  0.412458794658703881567052971402E+00;
      lob_weights(5) =  0.341122692483504364764240677108E+00;
      lob_weights(6) =  0.210704227143506039382991065776E+00;
      lob_weights(7) =  0.357142857142857142857142857143E-01;
      break;
    case 9:
      lob_weights(0) =  0.277777777777777777777777777778E-01;
      lob_weights(1) =  0.165495361560805525046339720029E+00;
      lob_weights(2) =  0.274538712500161735280705618579E+00;
      lob_weights(3) =  0.346428510973046345115131532140E+00;
      lob_weights(4) =  0.371519274376417233560090702948E+00;
      lob_weights(5) =  0.346428510973046345115131532140E+00;
      lob_weights(6) =  0.274538712500161735280705618579E+00;
      lob_weights(7) =  0.165495361560805525046339720029E+00;
      lob_weights(8) =  0.277777777777777777777777777778E-01;
      break;
    case 10:
      lob_weights(0) =  0.222222222222222222222222222222E-01;
      lob_weights(1) =  0.133305990851070111126227170755E+00;
      lob_weights(2) =  0.224889342063126452119457821731E+00;
      lob_weights(3) =  0.292042683679683757875582257374E+00;
      lob_weights(4) =  0.327539761183897456656510527917E+00;
      lob_weights(5) =  0.327539761183897456656510527917E+00;
      lob_weights(6) =  0.292042683679683757875582257374E+00;
      lob_weights(7) =  0.224889342063126452119457821731E+00;
      lob_weights(8) =  0.133305990851070111126227170755E+00;
      lob_weights(9) =  0.222222222222222222222222222222E-01;
      break;
    case 11:
      lob_weights(0) =  0.181818181818181818181818181818E-01;
      lob_weights(1) =  0.109612273266994864461403449580E+00;
      lob_weights(2) =  0.187169881780305204108141521899E+00;
      lob_weights(3) =  0.248048104264028314040084866422E+00;
      lob_weights(4) =  0.286879124779008088679222403332E+00;
      lob_weights(5) =  0.300217595455690693785931881170E+00;
      lob_weights(6) =  0.286879124779008088679222403332E+00;
      lob_weights(7) =  0.248048104264028314040084866422E+00;
      lob_weights(8) =  0.187169881780305204108141521899E+00;
      lob_weights(9) =  0.109612273266994864461403449580E+00;
      lob_weights(10)=  0.181818181818181818181818181818E-01;
      break;
    case 12:
      lob_weights(0) =  0.151515151515151515151515151515E-01;
      lob_weights(1) =  0.916845174131961306683425941341E-01;
      lob_weights(2) =  0.157974705564370115164671062700E+00;
      lob_weights(3) =  0.212508417761021145358302077367E+00;
      lob_weights(4) =  0.251275603199201280293244412148E+00;
      lob_weights(5) =  0.271405240910696177000288338500E+00;
      lob_weights(6) =  0.271405240910696177000288338500E+00;
      lob_weights(7) =  0.251275603199201280293244412148E+00;
      lob_weights(8) =  0.212508417761021145358302077367E+00;
      lob_weights(9) =  0.157974705564370115164671062700E+00;
      lob_weights(10) = 0.916845174131961306683425941341E-01;
      lob_weights(11) = 0.151515151515151515151515151515E-01;
      break;
    case 13:
      lob_weights(0) =  0.128205128205128205128205128205E-01;
      lob_weights(1) =  0.778016867468189277935889883331E-01;
      lob_weights(2) =  0.134981926689608349119914762589E+00;
      lob_weights(3) =  0.183646865203550092007494258747E+00;
      lob_weights(4) =  0.220767793566110086085534008379E+00;
      lob_weights(5) =  0.244015790306676356458578148360E+00;
      lob_weights(6) =  0.251930849333446736044138641541E+00;
      lob_weights(7) =  0.244015790306676356458578148360E+00;
      lob_weights(8) =  0.220767793566110086085534008379E+00;
      lob_weights(9) =  0.183646865203550092007494258747E+00;
      lob_weights(10) = 0.134981926689608349119914762589E+00;
      lob_weights(11) = 0.778016867468189277935889883331E-01;
      lob_weights(12) = 0.128205128205128205128205128205E-01;
      break;
    case 14:
      lob_weights(0) =  0.109890109890109890109890109890E-01;
      lob_weights(1) =  0.668372844976812846340706607461E-01;
      lob_weights(2) =  0.116586655898711651540996670655E+00;
      lob_weights(3) =  0.160021851762952142412820997988E+00;
      lob_weights(4) =  0.194826149373416118640331778376E+00;
      lob_weights(5) =  0.219126253009770754871162523954E+00;
      lob_weights(6) =  0.231612794468457058889628357293E+00;
      lob_weights(7) =  0.231612794468457058889628357293E+00;
      lob_weights(8) =  0.219126253009770754871162523954E+00;
      lob_weights(9) =  0.194826149373416118640331778376E+00;
      lob_weights(10) = 0.160021851762952142412820997988E+00;
      lob_weights(11) = 0.116586655898711651540996670655E+00;
      lob_weights(12) = 0.668372844976812846340706607461E-01;
      lob_weights(13) = 0.109890109890109890109890109890E-01;
      break;
    case 15:
      lob_weights(0) =  0.952380952380952380952380952381E-02;
      lob_weights(1) =  0.580298930286012490968805840253E-01;
      lob_weights(2) =  0.101660070325718067603666170789E+00;
      lob_weights(3) =  0.140511699802428109460446805644E+00;
      lob_weights(4) =  0.172789647253600949052077099408E+00;
      lob_weights(5) =  0.196987235964613356092500346507E+00;
      lob_weights(6) =  0.211973585926820920127430076977E+00;
      lob_weights(7) =  0.217048116348815649514950214251E+00;
      lob_weights(8) =  0.211973585926820920127430076977E+00;
      lob_weights(9) =  0.196987235964613356092500346507E+00;
      lob_weights(10) = 0.172789647253600949052077099408E+00;
      lob_weights(11) = 0.140511699802428109460446805644E+00;
      lob_weights(12) = 0.101660070325718067603666170789E+00;
      lob_weights(13) = 0.580298930286012490968805840253E-01;
      lob_weights(14) = 0.952380952380952380952380952381E-02;
    case 16:
      lob_weights(0) =  0.833333333333333333333333333333E-02;
      lob_weights(1) =  0.508503610059199054032449195655E-01;
      lob_weights(2) =  0.893936973259308009910520801661E-01;
      lob_weights(3) =  0.124255382132514098349536332657E+00;
      lob_weights(4) =  0.154026980807164280815644940485E+00;
      lob_weights(5) =  0.177491913391704125301075669528E+00;
      lob_weights(6) =  0.193690023825203584316913598854E+00;
      lob_weights(7) =  0.201958308178229871489199125411E+00;
      lob_weights(8) =  0.201958308178229871489199125411E+00;
      lob_weights(9) =  0.193690023825203584316913598854E+00;
      lob_weights(10) = 0.177491913391704125301075669528E+00;
      lob_weights(11) = 0.154026980807164280815644940485E+00;
      lob_weights(12) = 0.124255382132514098349536332657E+00;
      lob_weights(13) = 0.893936973259308009910520801661E-01;
      lob_weights(14) = 0.508503610059199054032449195655E-01;
      lob_weights(15) = 0.833333333333333333333333333333E-02;
      break;
    case 17:
      lob_weights(0) =  0.735294117647058823529411764706E-02;
      lob_weights(1) =  0.449219405432542096474009546232E-01;
      lob_weights(2) =  0.791982705036871191902644299528E-01;
      lob_weights(3) =  0.110592909007028161375772705220E+00;
      lob_weights(4) =  0.137987746201926559056201574954E+00;
      lob_weights(5) =  0.160394661997621539516328365865E+00;
      lob_weights(6) =  0.177004253515657870436945745363E+00;
      lob_weights(7) =  0.187216339677619235892088482861E+00;
      lob_weights(8) =  0.190661874753469433299407247028E+00;
      lob_weights(9) =  0.187216339677619235892088482861E+00;
      lob_weights(10) = 0.177004253515657870436945745363E+00;
      lob_weights(11) = 0.160394661997621539516328365865E+00;
      lob_weights(12) = 0.137987746201926559056201574954E+00;
      lob_weights(13) = 0.110592909007028161375772705220E+00;
      lob_weights(14) = 0.791982705036871191902644299528E-01;
      lob_weights(15) = 0.449219405432542096474009546232E-01;
      lob_weights(16) = 0.735294117647058823529411764706E-02;
      break;
    case 18:
      lob_weights(0) =  0.653594771241830065359477124183E-02;
      lob_weights(1) =  0.399706288109140661375991764101E-01;
      lob_weights(2) =  0.706371668856336649992229601678E-01;
      lob_weights(3) =  0.990162717175028023944236053187E-01;
      lob_weights(4) =  0.124210533132967100263396358897E+00;
      lob_weights(5) =  0.145411961573802267983003210494E+00;
      lob_weights(6) =  0.161939517237602489264326706700E+00;
      lob_weights(7) =  0.173262109489456226010614403827E+00;
      lob_weights(8) =  0.179015863439703082293818806944E+00;
      lob_weights(9) =  0.179015863439703082293818806944E+00;
      lob_weights(10) = 0.173262109489456226010614403827E+00;
      lob_weights(11) = 0.161939517237602489264326706700E+00;
      lob_weights(12) = 0.145411961573802267983003210494E+00;
      lob_weights(13) = 0.124210533132967100263396358897E+00;
      lob_weights(14) = 0.990162717175028023944236053187E-01;
      lob_weights(15) = 0.706371668856336649992229601678E-01;
      lob_weights(16) = 0.399706288109140661375991764101E-01;
      lob_weights(17) = 0.653594771241830065359477124183E-02;
      break;
    case 19:
      lob_weights(0) =  0.584795321637426900584795321637E-02;
      lob_weights(1) =  0.357933651861764771154255690351E-01;
      lob_weights(2) =  0.633818917626297368516956904183E-01;
      lob_weights(3) =  0.891317570992070844480087905562E-01;
      lob_weights(4) =  0.112315341477305044070910015464E+00;
      lob_weights(5) =  0.132267280448750776926046733910E+00;
      lob_weights(6) =  0.148413942595938885009680643668E+00;
      lob_weights(7) =  0.160290924044061241979910968184E+00;
      lob_weights(8) =  0.167556584527142867270137277740E+00;
      lob_weights(9) =  0.170001919284827234644672715617E+00;
      lob_weights(10) = 0.167556584527142867270137277740E+00;
      lob_weights(11) = 0.160290924044061241979910968184E+00;
      lob_weights(12) = 0.148413942595938885009680643668E+00;
      lob_weights(13) = 0.132267280448750776926046733910E+00;
      lob_weights(14) = 0.112315341477305044070910015464E+00;
      lob_weights(15) = 0.891317570992070844480087905562E-01;
      lob_weights(16) = 0.633818917626297368516956904183E-01;
      lob_weights(17) = 0.357933651861764771154255690351E-01;
      lob_weights(18) = 0.584795321637426900584795321637E-02;
      break;
    case 20:
      lob_weights(0) =  0.526315789473684210526315789474E-02;
      lob_weights(1) =  0.322371231884889414916050281173E-01;
      lob_weights(2) =  0.571818021275668260047536271732E-01;
      lob_weights(3) =  0.806317639961196031447768461137E-01;
      lob_weights(4) =  0.101991499699450815683781205733E+00;
      lob_weights(5) =  0.120709227628674725099429705002E+00;
      lob_weights(6) =  0.136300482358724184489780792989E+00;
      lob_weights(7) =  0.148361554070916825814713013734E+00;
      lob_weights(8) =  0.156580102647475487158169896794E+00;
      lob_weights(9) =  0.160743286387845749007726726449E+00;
      lob_weights(10) = 0.160743286387845749007726726449E+00;
      lob_weights(11) = 0.156580102647475487158169896794E+00;
      lob_weights(12) = 0.148361554070916825814713013734E+00;
      lob_weights(13) = 0.136300482358724184489780792989E+00;
      lob_weights(14) = 0.120709227628674725099429705002E+00;
      lob_weights(15) = 0.101991499699450815683781205733E+00;
      lob_weights(16) = 0.806317639961196031447768461137E-01;
      lob_weights(17) = 0.571818021275668260047536271732E-01;
      lob_weights(18) = 0.322371231884889414916050281173E-01;
      lob_weights(19) = 0.526315789473684210526315789474E-02;
      break;
    default:
      std::ostringstream ss;
      ss << "Error: " << num << "-point quadrature rule not implemented.";
      throw NotImplementedError(ss.str());
  }
} 


/*
 * Fill an array with Gauss-Legendre quadrature points (endpoints are -1 and 1)
 *
 * Parameters
 * ----------
 * leg_points : MATAR CArray to fill with points
 * num        : number of points in quadrature rule
 *
 * Returns
 * -------
 * leg_points : MATAR CArray to fill with points
 */
void legendre_points(MatarRealCArray &leg_points, const int &num) {
  switch (num) {
    case 1:
      leg_points(0) = 0.0;
      break;
    case 2:
      leg_points(0) = -0.577350269189625764509148780501;
      leg_points(1) =  0.577350269189625764509148780501;
      break;
    case 3:
      leg_points(0) = -0.774596669241483377035853079956;
      leg_points(1) =  0.0;
      leg_points(2) =  0.774596669241483377035853079956;
      break;
    case 4:
      leg_points(0) = -0.861136311594052575223946488892;
      leg_points(1) = -0.339981043584856264802665759103;
      leg_points(2) =  0.339981043584856264802665759103;
      leg_points(3) =  0.861136311594052575223946488892;
      break;
    case 5:
      leg_points(0) = -0.906179845938663992797626878299;
      leg_points(1) = -0.538469310105683091036314420700;
      leg_points(2) =  0.0;
      leg_points(3) =  0.538469310105683091036314420700;
      leg_points(4) =  0.906179845938663992797626878299;
      break;
    case 6:
      leg_points(0) = -0.932469514203152027812301554493;
      leg_points(1) = -0.661209386466264513661399595019;
      leg_points(2) = -0.238619186083196908630501721680;
      leg_points(3) =  0.238619186083196908630501721680;
      leg_points(4) =  0.661209386466264513661399595019;
      leg_points(5) =  0.932469514203152027812301554493;
      break;
    case 7:
      leg_points(0) = -0.949107912342758524526189684047;
      leg_points(1) = -0.741531185599394439863864773280;
      leg_points(2) = -0.405845151377397166906606412076;
      leg_points(3) =  0.0E+00;
      leg_points(4) =  0.405845151377397166906606412076;
      leg_points(5) =  0.741531185599394439863864773280;
      leg_points(6) =  0.949107912342758524526189684047;
      break;
    case 8:
      leg_points(0) = -0.960289856497536231683560868569;
      leg_points(1) = -0.796666477413626739591553936475;
      leg_points(2) = -0.525532409916328985817739049189;
      leg_points(3) = -0.183434642495649804939476142360;
      leg_points(4) =  0.183434642495649804939476142360;
      leg_points(5) =  0.525532409916328985817739049189;
      leg_points(6) =  0.796666477413626739591553936475;
      leg_points(7) =  0.960289856497536231683560868569;
      break;
    case 9:
      leg_points(0) = -0.968160239507626089835576202903;
      leg_points(1) = -0.836031107326635794299429788069;
      leg_points(2) = -0.613371432700590397308702039341;
      leg_points(3) = -0.324253423403808929038538014643;
      leg_points(4) =  0.0E+00;
      leg_points(5) =  0.324253423403808929038538014643;
      leg_points(6) =  0.613371432700590397308702039341;
      leg_points(7) =  0.836031107326635794299429788069;
      leg_points(8) =  0.968160239507626089835576202903;
      break;
    case 10:
      leg_points(0) = -0.9739065285171717200779640120844;
      leg_points(1) = -0.8650633666889845107320966884234;
      leg_points(2) = -0.6794095682990244062343273651148;
      leg_points(3) = -0.4333953941292471907992659431657;
      leg_points(4) = -0.1488743389816312108848260011297;
      leg_points(5) =  0.1488743389816312108848260011297;
      leg_points(6) =  0.4333953941292471907992659431657;
      leg_points(7) =  0.6794095682990244062343273651148;
      leg_points(8) =  0.8650633666889845107320966884234;
      leg_points(9) =  0.9739065285171717200779640120844;
      break;
    case 11:
      leg_points(0) = -0.9782286581460569928039380011228;
      leg_points(1) = -0.8870625997680952990751577693039;
      leg_points(2) = -0.7301520055740493240934162520311;
      leg_points(3) = -0.5190961292068118159257256694586;
      leg_points(4) = -0.2695431559523449723315319854008;
      leg_points(5) =  0.0E+00;
      leg_points(6) =  0.2695431559523449723315319854008;
      leg_points(7) =  0.5190961292068118159257256694586;
      leg_points(8) =  0.7301520055740493240934162520311;
      leg_points(9) =  0.8870625997680952990751577693039;
      leg_points(10) = 0.9782286581460569928039380011228;
      break;
    case 12:
      leg_points(0) = -0.9815606342467192506905490901492;
      leg_points(1) = -0.9041172563704748566784658661190;
      leg_points(2) = -0.7699026741943046870368938332128;
      leg_points(3) = -0.5873179542866174472967024189405;
      leg_points(4) = -0.3678314989981801937526915366437;
      leg_points(5) = -0.1252334085114689154724413694638;
      leg_points(6) =  0.1252334085114689154724413694638;
      leg_points(7) =  0.3678314989981801937526915366437;
      leg_points(8) =  0.5873179542866174472967024189405;
      leg_points(9) =  0.7699026741943046870368938332128;
      leg_points(10) = 0.9041172563704748566784658661190;
      leg_points(11) = 0.9815606342467192506905490901492;
      break;
    case 13:
      leg_points(0) = -0.98418305471858814947282944880710;
      leg_points(1) = -0.91759839922297796520654783650071;
      leg_points(2) = -0.80157809073330991279420648958285;
      leg_points(3) = -0.64234933944034022064398460699551;
      leg_points(4) = -0.44849275103644685287791285212763;
      leg_points(5) = -0.23045831595513479406552812109798;
      leg_points(6) =  0.0E+00;
      leg_points(7) =  0.23045831595513479406552812109798;
      leg_points(8) =  0.44849275103644685287791285212763;
      leg_points(9) =  0.64234933944034022064398460699551;
      leg_points(10) = 0.80157809073330991279420648958285;
      leg_points(11) = 0.91759839922297796520654783650071;
      leg_points(12) = 0.98418305471858814947282944880710;
      break;
    case 14:
      leg_points(0) = -0.986283808696812338841597266704052;
      leg_points(1) = -0.928434883663573517336391139377874;
      leg_points(2) = -0.827201315069764993189794742650394;
      leg_points(3) = -0.687292904811685470148019803019334;
      leg_points(4) = -0.515248636358154091965290718551188;
      leg_points(5) = -0.319112368927889760435671824168475;
      leg_points(6) = -0.108054948707343662066244650219834;
      leg_points(7) =  0.108054948707343662066244650219834;
      leg_points(8) =  0.319112368927889760435671824168475;
      leg_points(9) =  0.515248636358154091965290718551188;
      leg_points(10) = 0.687292904811685470148019803019334;
      leg_points(11) = 0.827201315069764993189794742650394;
      leg_points(12) = 0.928434883663573517336391139377874;
      leg_points(13) = 0.986283808696812338841597266704052;
      break;
    case 15:
      leg_points(0) = -0.987992518020485428489565718586612;
      leg_points(1) = -0.937273392400705904307758947710209;
      leg_points(2) = -0.848206583410427216200648320774216;
      leg_points(3) = -0.724417731360170047416186054613938;
      leg_points(4) = -0.570972172608538847537226737253910;
      leg_points(5) = -0.394151347077563369897207370981045;
      leg_points(6) = -0.201194093997434522300628303394596;
      leg_points(7) =  0.0E+00;
      leg_points(8) =  0.201194093997434522300628303394596;
      leg_points(9) =  0.394151347077563369897207370981045;
      leg_points(10) = 0.570972172608538847537226737253910;
      leg_points(11) = 0.724417731360170047416186054613938;
      leg_points(12) = 0.848206583410427216200648320774216;
      leg_points(13) = 0.937273392400705904307758947710209;
      leg_points(14) = 0.987992518020485428489565718586612;
      break;
    case 16:
      leg_points(0) = -0.989400934991649932596154173450332;
      leg_points(1) = -0.944575023073232576077988415534608;
      leg_points(2) = -0.865631202387831743880467897712393;
      leg_points(3) = -0.755404408355003033895101194847442;
      leg_points(4) = -0.617876244402643748446671764048791;
      leg_points(5) = -0.458016777657227386342419442983577;
      leg_points(6) = -0.281603550779258913230460501460496;
      leg_points(7) = -0.095012509837637440185319335424958;
      leg_points(8) =  0.095012509837637440185319335424958;
      leg_points(9) =  0.281603550779258913230460501460496;
      leg_points(10) = 0.458016777657227386342419442983577;
      leg_points(11) = 0.617876244402643748446671764048791;
      leg_points(12) = 0.755404408355003033895101194847442;
      leg_points(13) = 0.865631202387831743880467897712393;
      leg_points(14) = 0.944575023073232576077988415534608;
      leg_points(15) = 0.989400934991649932596154173450332;
      break;
    case 17:
      leg_points(0) = -0.990575475314417335675434019940665;
      leg_points(1) = -0.950675521768767761222716957895803;
      leg_points(2) = -0.880239153726985902122955694488155;
      leg_points(3) = -0.781514003896801406925230055520476;
      leg_points(4) = -0.657671159216690765850302216643002;
      leg_points(5) = -0.512690537086476967886246568629551;
      leg_points(6) = -0.351231763453876315297185517095346;
      leg_points(7) = -0.178484181495847855850677493654065;
      leg_points(8) =  0.0E+00;
      leg_points(9) =  0.178484181495847855850677493654065;
      leg_points(10) = 0.351231763453876315297185517095346;
      leg_points(11) = 0.512690537086476967886246568629551;
      leg_points(12) = 0.657671159216690765850302216643002;
      leg_points(13) = 0.781514003896801406925230055520476;
      leg_points(14) = 0.880239153726985902122955694488155;
      leg_points(15) = 0.950675521768767761222716957895803;
      leg_points(16) = 0.990575475314417335675434019940665;
      break;
    case 18:
      leg_points(0) = -0.991565168420930946730016004706150;
      leg_points(1) = -0.955823949571397755181195892929776;
      leg_points(2) = -0.892602466497555739206060591127145;
      leg_points(3) = -0.803704958972523115682417455014590;
      leg_points(4) = -0.691687043060353207874891081288848;
      leg_points(5) = -0.559770831073947534607871548525329;
      leg_points(6) = -0.411751161462842646035931793833051;
      leg_points(7) = -0.251886225691505509588972854877911;
      leg_points(8) = -0.084775013041735301242261852935783;
      leg_points(9) =  0.084775013041735301242261852935783;
      leg_points(10) = 0.251886225691505509588972854877911;
      leg_points(11) = 0.411751161462842646035931793833051;
      leg_points(12) = 0.559770831073947534607871548525329;
      leg_points(13) = 0.691687043060353207874891081288848;
      leg_points(14) = 0.803704958972523115682417455014590;
      leg_points(15) = 0.892602466497555739206060591127145;
      leg_points(16) = 0.955823949571397755181195892929776;
      leg_points(17) = 0.991565168420930946730016004706150;
      break;
    case 19:
      leg_points(0) = -0.992406843843584403189017670253260;
      leg_points(1) = -0.960208152134830030852778840687651;
      leg_points(2) = -0.903155903614817901642660928532312;
      leg_points(3) = -0.822714656537142824978922486712713;
      leg_points(4) = -0.720966177335229378617095860823781;
      leg_points(5) = -0.600545304661681023469638164946239;
      leg_points(6) = -0.464570741375960945717267148104102;
      leg_points(7) = -0.316564099963629831990117328849844;
      leg_points(8) = -0.160358645640225375868096115740743;
      leg_points(9) =  0.0E+00;
      leg_points(10) = 0.160358645640225375868096115740743;
      leg_points(11) = 0.316564099963629831990117328849844;
      leg_points(12) = 0.464570741375960945717267148104102;
      leg_points(13) = 0.600545304661681023469638164946239;
      leg_points(14) = 0.720966177335229378617095860823781;
      leg_points(15) = 0.822714656537142824978922486712713;
      leg_points(16) = 0.903155903614817901642660928532312;
      leg_points(17) = 0.960208152134830030852778840687651;
      leg_points(18) = 0.992406843843584403189017670253260;
      break;
    default:
      std::ostringstream ss;
      ss << "Error: " << num << "-point quadrature rule not implemented.";
      throw NotImplementedError(ss.str());
  }
}


/*
 * Fill an array with Gauss-Legendre quadrature weights
 *
 * Parameters
 * ----------
 * leg_weights : MATAR CArray to fill with weights
 * num         : number of weights in quadrature rule
 *
 * Returns
 * -------
 * leg_weights : MATAR CArray to fill with weights
 */
void legendre_weights(MatarRealCArray &leg_weights, const int &num) {
  switch (num) {
    case 1:
      leg_weights(0) = 2.0;
      break;
    case 2:
      leg_weights(0) = 1.0;
      leg_weights(1) = 1.0;
      break;
    case 3:
      leg_weights(0) = 0.555555555555555555555555555555555;
      leg_weights(1) = 0.888888888888888888888888888888888;
      leg_weights(2) = 0.555555555555555555555555555555555;
      break;
    case 4:
      leg_weights(0) = 0.347854845137453857373063949221999;
      leg_weights(1) = 0.652145154862546142626936050778000;
      leg_weights(2) = 0.652145154862546142626936050778000;
      leg_weights(3) = 0.347854845137453857373063949221999;
      break;
    case 5:
      leg_weights(0) = 0.236926885056189087514264040719917;
      leg_weights(1) = 0.478628670499366468041291514835638;
      leg_weights(2) = 0.568888888888888888888888888888888;
      leg_weights(3) = 0.478628670499366468041291514835638;
      leg_weights(4) = 0.236926885056189087514264040719917;
      break;
    case 6:
      leg_weights(0) = 0.171324492379170345040296142172732;
      leg_weights(1) = 0.360761573048138607569833513837716;
      leg_weights(2) = 0.467913934572691047389870343989550;
      leg_weights(3) = 0.467913934572691047389870343989550;
      leg_weights(4) = 0.360761573048138607569833513837716;
      leg_weights(5) = 0.171324492379170345040296142172732;
      break;
    case 7:
      leg_weights(0) = 0.129484966168869693270611432679082;
      leg_weights(1) = 0.279705391489276667901467771423779;
      leg_weights(2) = 0.381830050505118944950369775488975;
      leg_weights(3) = 0.417959183673469387755102040816326;
      leg_weights(4) = 0.381830050505118944950369775488975;
      leg_weights(5) = 0.279705391489276667901467771423779;
      leg_weights(6) = 0.129484966168869693270611432679082;
      break;
    case 8:
      leg_weights(0) = 0.101228536290376259152531354309962;
      leg_weights(1) = 0.222381034453374470544355994426240;
      leg_weights(2) = 0.313706645877887287337962201986601;
      leg_weights(3) = 0.362683783378361982965150449277195;
      leg_weights(4) = 0.362683783378361982965150449277195;
      leg_weights(5) = 0.313706645877887287337962201986601;
      leg_weights(6) = 0.222381034453374470544355994426240;
      leg_weights(7) = 0.101228536290376259152531354309962;
      break;
    case 9:
      leg_weights(0) = 0.081274388361574411971892158110523;
      leg_weights(1) = 0.180648160694857404058472031242912;
      leg_weights(2) = 0.260610696402935462318742869418632;
      leg_weights(3) = 0.312347077040002840068630406584443;
      leg_weights(4) = 0.330239355001259763164525069286974;
      leg_weights(5) = 0.312347077040002840068630406584443;
      leg_weights(6) = 0.260610696402935462318742869418632;
      leg_weights(7) = 0.180648160694857404058472031242912;
      leg_weights(8) = 0.081274388361574411971892158110523;
      break;
    case 10:
      leg_weights(0) = 0.066671344308688137593568809893331;
      leg_weights(1) = 0.149451349150580593145776339657697;
      leg_weights(2) = 0.219086362515982043995534934228163;
      leg_weights(3) = 0.269266719309996355091226921569469;
      leg_weights(4) = 0.295524224714752870173892994651338;
      leg_weights(5) = 0.295524224714752870173892994651338;
      leg_weights(6) = 0.269266719309996355091226921569469;
      leg_weights(7) = 0.219086362515982043995534934228163;
      leg_weights(8) = 0.149451349150580593145776339657697;
      leg_weights(9) = 0.066671344308688137593568809893331;
      break;
    case 11:
      leg_weights(0) = 0.055668567116173666482753720442548;
      leg_weights(1) = 0.125580369464904624634694299223940;
      leg_weights(2) = 0.186290210927734251426097641431655;
      leg_weights(3) = 0.233193764591990479918523704843175;
      leg_weights(4) = 0.262804544510246662180688869890509;
      leg_weights(5) = 0.272925086777900630714483528336342;
      leg_weights(6) = 0.262804544510246662180688869890509;
      leg_weights(7) = 0.233193764591990479918523704843175;
      leg_weights(8) = 0.186290210927734251426097641431655;
      leg_weights(9) = 0.125580369464904624634694299223940;
      leg_weights(10)= 0.055668567116173666482753720442548;
      break;
    case 12:
      leg_weights(0) =  0.04717533638651182719461596148501;
      leg_weights(1) =  0.10693932599531843096025471819399;
      leg_weights(2) =  0.16007832854334622633465252954335;
      leg_weights(3) =  0.20316742672306592174906445580979;
      leg_weights(4) =  0.23349253653835480876084989892487;
      leg_weights(5) =  0.24914704581340278500056243604295;
      leg_weights(6) =  0.24914704581340278500056243604295;
      leg_weights(7) =  0.23349253653835480876084989892487;
      leg_weights(8) =  0.20316742672306592174906445580979;
      leg_weights(9) =  0.16007832854334622633465252954335;
      leg_weights(10) = 0.10693932599531843096025471819399;
      leg_weights(11) = 0.04717533638651182719461596148501;
      break;
    case 13:
      leg_weights(0) =  0.04048400476531587952002159220098;
      leg_weights(1) =  0.09212149983772844791442177595379;
      leg_weights(2) =  0.13887351021978723846360177686887;
      leg_weights(3) =  0.17814598076194573828004669199609;
      leg_weights(4) =  0.20781604753688850231252321930605;
      leg_weights(5) =  0.22628318026289723841209018603977;
      leg_weights(6) =  0.23255155323087391019458951526883;
      leg_weights(7) =  0.22628318026289723841209018603977;
      leg_weights(8) =  0.20781604753688850231252321930605;
      leg_weights(9) =  0.17814598076194573828004669199609;
      leg_weights(10) = 0.13887351021978723846360177686887;
      leg_weights(11) = 0.09212149983772844791442177595379;
      leg_weights(12) = 0.04048400476531587952002159220098;
      break;
    case 14:
      leg_weights(0) =  0.03511946033175186303183287613819;
      leg_weights(1) =  0.08015808715976020980563327706285;
      leg_weights(2) =  0.12151857068790318468941480907247;
      leg_weights(3) =  0.15720316715819353456960193862384;
      leg_weights(4) =  0.18553839747793781374171659012515;
      leg_weights(5) =  0.20519846372129560396592406566121;
      leg_weights(6) =  0.21526385346315779019587644331626;
      leg_weights(7) =  0.21526385346315779019587644331626;
      leg_weights(8) =  0.20519846372129560396592406566121;
      leg_weights(9) =  0.18553839747793781374171659012515;
      leg_weights(10) = 0.15720316715819353456960193862384;
      leg_weights(11) = 0.12151857068790318468941480907247;
      leg_weights(12) = 0.08015808715976020980563327706285;
      leg_weights(13) = 0.03511946033175186303183287613819;
      break;
    case 15:
      leg_weights(0) =  0.03075324199611726835462839357720;
      leg_weights(1) =  0.07036604748810812470926741645066;
      leg_weights(2) =  0.10715922046717193501186954668586;
      leg_weights(3) =  0.13957067792615431444780479451102;
      leg_weights(4) =  0.16626920581699393355320086048120;
      leg_weights(5) =  0.18616100001556221102680056186642;
      leg_weights(6) =  0.19843148532711157645611832644383;
      leg_weights(7) =  0.20257824192556127288062019996751;
      leg_weights(8) =  0.19843148532711157645611832644383;
      leg_weights(9) =  0.18616100001556221102680056186642;
      leg_weights(10) = 0.16626920581699393355320086048120;
      leg_weights(11) = 0.13957067792615431444780479451102;
      leg_weights(12) = 0.10715922046717193501186954668586;
      leg_weights(13) = 0.07036604748810812470926741645066;
      leg_weights(14) = 0.03075324199611726835462839357720;
      break;
    case 16:
      leg_weights(0) =  0.02715245941175409485178057245601;
      leg_weights(1) =  0.06225352393864789286284383699437;
      leg_weights(2) =  0.09515851168249278480992510760224;
      leg_weights(3) =  0.12462897125553387205247628219201;
      leg_weights(4) =  0.14959598881657673208150173054747;
      leg_weights(5) =  0.16915651939500253818931207903035;
      leg_weights(6) =  0.18260341504492358886676366796921;
      leg_weights(7) =  0.18945061045506849628539672320828;
      leg_weights(8) =  0.18945061045506849628539672320828;
      leg_weights(9) =  0.18260341504492358886676366796921;
      leg_weights(10) = 0.16915651939500253818931207903035;
      leg_weights(11) = 0.14959598881657673208150173054747;
      leg_weights(12) = 0.12462897125553387205247628219201;
      leg_weights(13) = 0.09515851168249278480992510760224;
      leg_weights(14) = 0.06225352393864789286284383699437;
      leg_weights(15) = 0.02715245941175409485178057245601;
      break;
    case 17:
      leg_weights(0) =  0.02414830286854793196011002628756;
      leg_weights(1) =  0.05545952937398720112944016535824;
      leg_weights(2) =  0.08503614831717918088353537019106;
      leg_weights(3) =  0.11188384719340397109478838562635;
      leg_weights(4) =  0.13513636846852547328631998170235;
      leg_weights(5) =  0.15404576107681028808143159480195;
      leg_weights(6) =  0.16800410215645004450997066378832;
      leg_weights(7) =  0.17656270536699264632527099011319;
      leg_weights(8) =  0.17944647035620652545826564426188;
      leg_weights(9) =  0.17656270536699264632527099011319;
      leg_weights(10) = 0.16800410215645004450997066378832;
      leg_weights(11) = 0.15404576107681028808143159480195;
      leg_weights(12) = 0.13513636846852547328631998170235;
      leg_weights(13) = 0.11188384719340397109478838562635;
      leg_weights(14) = 0.08503614831717918088353537019106;
      leg_weights(15) = 0.05545952937398720112944016535824;
      leg_weights(16) = 0.02414830286854793196011002628756;
      break;
    case 18:
      leg_weights(0) =  0.02161601352648331031334271026645;
      leg_weights(1) =  0.04971454889496979645333494620263;
      leg_weights(2) =  0.07642573025488905652912967761663;
      leg_weights(3) =  0.10094204410628716556281398492483;
      leg_weights(4) =  0.12255520671147846018451912680020;
      leg_weights(5) =  0.14064291467065065120473130375194;
      leg_weights(6) =  0.15468467512626524492541800383637;
      leg_weights(7) =  0.16427648374583272298605377646592;
      leg_weights(8) =  0.16914238296314359184065647013498;
      leg_weights(9) =  0.16914238296314359184065647013498;
      leg_weights(10) = 0.16427648374583272298605377646592;
      leg_weights(11) = 0.15468467512626524492541800383637;
      leg_weights(12) = 0.14064291467065065120473130375194;
      leg_weights(13) = 0.12255520671147846018451912680020;
      leg_weights(14) = 0.10094204410628716556281398492483;
      leg_weights(15) = 0.07642573025488905652912967761663;
      leg_weights(16) = 0.04971454889496979645333494620263;
      leg_weights(17) = 0.02161601352648331031334271026645;
      break;
    case 19:
      leg_weights(0) =  0.01946178822972647703631204146443;
      leg_weights(1) =  0.04481422676569960033283815740199;
      leg_weights(2) =  0.06904454273764122658070825800601;
      leg_weights(3) =  0.09149002162244999946446209412383;
      leg_weights(4) =  0.11156664554733399471602390168176;
      leg_weights(5) =  0.12875396253933622767551578485687;
      leg_weights(6) =  0.14260670217360661177574610944190;
      leg_weights(7) =  0.15276604206585966677885540089766;
      leg_weights(8) =  0.15896884339395434764995643946504;
      leg_weights(9) =  0.16105444984878369597916362532091;
      leg_weights(10) = 0.15896884339395434764995643946504;
      leg_weights(11) = 0.15276604206585966677885540089766;
      leg_weights(12) = 0.14260670217360661177574610944190;
      leg_weights(13) = 0.12875396253933622767551578485687;
      leg_weights(14) = 0.11156664554733399471602390168176;
      leg_weights(15) = 0.09149002162244999946446209412383;
      leg_weights(16) = 0.06904454273764122658070825800601;
      leg_weights(17) = 0.04481422676569960033283815740199;
      leg_weights(18) = 0.01946178822972647703631204146443;
      break;
    default:
      std::ostringstream ss;
      ss << "Error: " << num << "-point quadrature rule not implemented.";
      throw NotImplementedError(ss.str());
  }
}
